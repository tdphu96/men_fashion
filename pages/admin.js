import Head from 'next/head'
import styles from '../styles/Admin.module.scss'
import {useEffect, useRef, useState} from "react";
import NATS from "../clientNats/clientNats";
import {mToast} from "../mFun";
import cx from "classnames";
import {useRouter} from "next/router";

export default function Admin() {
    const router = useRouter()
    const [page, setPage] = useState( 1 )
    const [products, setProducts] = useState( [] )
    const [countProducts, setCountProducts] = useState( 0 )
    const [upFace, setUpFace] = useState( null )
    const paginate = (array, page, limit = 10) => array.slice( ((page - 1) * limit), ((page - 1) * limit) + limit )
    const getCountData = () => {
        NATS.getCountProducts( 'products' ).then( (res) => setCountProducts( res.data ) )
    }
    useEffect( () => {
        if (!products) return
        const subject = "db.products.snapshot"
        NATS.subscribe( subject, (res) => {
            if (res.type === 'deleted') {
                getCountData()
                const temp = [...products]
                let newProducts = temp.filter( e => e._id !== res.data._id )
                setProducts( newProducts )
            }
            if (res.type === 'created') {
                getCountData()
                const temp = [res.data, ...products]
                setProducts( temp )
            }
            if (res.type === 'updated') {
                const temp = [...products]
                let index = temp.findIndex( e => e._id === res.data._id )
                if (index > -1) {
                    temp[index] = res.data
                    setProducts( [...temp] )
                }
            }
        } )
    }, [products] )
    useEffect( () => {
        (async () => {
            try {
                getCountData()
                let {data} = await NATS.getProducts( {sort: {'created': -1}, skip: 0, limit: 1000} ) //, skip: 0, limit: 200
                const d = paginate( data, page )
                if (page <= 1) setProducts( d )
                else setProducts( products => [...products, ...d] )
            } catch (e) {
                console.log( e )
            }
        })()
    }, [page] )
    useEffect( () => {
        const handleScroll = () => {
            const bottom = (document.documentElement.scrollHeight) - document.documentElement.scrollTop <= document.documentElement.clientHeight + 1;
            if (bottom) setPage( p => p + 1 )
        }
        window.addEventListener( 'scroll', handleScroll );
        return () => window.removeEventListener( 'scroll', handleScroll );
    } );

    const deleteProduct = async (_id) => {
        try {
            let res = await NATS.deleteProduct( _id )
            if (res.status === 'deleted') {
                mToast( "Đã xóa thành công", 'success' )
            }
        } catch (e) {
            console.log( e )
        }
    }
    const activeProduct = (e) => {
        let active = e.active === 'active' ? 'no_active' : 'active'
        let temp = {...e}
        temp.active = active
        NATS.updateProduct( temp ).then( () => mToast( active, 'success' ) )
    }
    return (
        <div className={styles.admin}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <div className={styles.container}>
                <div className={styles.wrapper_bars}>
                    <div className={styles.bars_products}>
                        <div className={styles.title}>Danh sách sản phẩm</div>
                        <div>
                            <span>Số lượng : {countProducts}</span>
                        </div>
                    </div>
                </div>
                <div className={styles.list_products}>
                    {products?.map( (e, i) => {
                        const {_id, nameProduct, priceDrops, views, category, active, price, imageSmalls, created} = e
                        return (
                            <div key={i} className={styles.wrapper_item_product}>
                                <div className={styles.item_product}>
                                    <img src={imageSmalls[0]} alt="" width={100} height={100}/>
                                    <div className={styles.info_product}>
                                        <p>{nameProduct}</p>
                                        <p>{active === 'active' ? "Đã xuất bản" : 'nháp'}: {created}</p>
                                        <div className={styles.list_category}>
                                            {category.map( (e, i) => {
                                                return (
                                                    <div key={i} className={styles.item_category}>
                                                        <span>{e}</span>
                                                    </div>
                                                )
                                            } )}
                                        </div>
                                    </div>
                                    <div className={styles.group_action}>
                                        <button onClick={() => deleteProduct( _id )}>Xóa</button>
                                        <button onClick={() => alert( 1 )}>chia sẽ</button>
                                        <button
                                            onClick={() => activeProduct( e )}>{active === 'active' ? 'ẩn đi' : 'xuất bản'}</button>
                                        <button onClick={() => setUpFace( e )}>ĐĂNG FACEBOOK</button>
                                    </div>
                                </div>
                                {/*href={_id}*/}
                                <div onClick={() => router.push( _id )} className={styles.link}/>
                            </div>
                        )
                    } )}
                </div>
            </div>

            {upFace && <FormUpdateFaceBook product={upFace} close={() => setUpFace( null )}/>}
        </div>
    )
}

const FormUpdateFaceBook = ({product, close}) => {
    const [process, setProcess] = useState( null )
    useEffect( () => {
        document.body.style.overflow = 'hidden'
    }, [] )
    let id_page = 101186355479156
    let tokenFacebook = "EAAH1pVBaw9MBAAdXEz6l8WS8n3ZAq7MJGZAxPyXplQVoNOhwj55drCemcDXZBw1EVcQduSPCy5A2ZCJksZCZAJ2RLYzMmY74XWbUxcmtGgmUg9okNw5EhMXeiP6Hu8LU2SXN75R8a3p37SLk5GXIzxwv7GWC7mmgmra4MXZAY3fY4qLugasRdjUSNZA33ozujDME2iifkHOGowZDZD"
    const pushFacebook = async (data) => {
        const {content, images} = data
        const pushPhoto = async (image) => {
            return await fetch(
                `https://graph.facebook.com/v14.0/${id_page}/photos?url=${image}&published=false&access_token=${tokenFacebook}`,
                {method: 'POST'}
            ).then( (r => {
                if (r.status === 200) return r.json()
            }) );
        }
        try {
            let id_images = []
            for (let i = 0; i < images.length; i++) {
                let id_image = await pushPhoto( images[i] )
                setProcess( process => process + (1 / images.length) * 90 )
                if (id_image) id_images.push( id_image )
            }
            let attached_medias = id_images.map( (e, i) => {
                return `&attached_media[${i}]={"media_fbid":"${e.id}"}`
            } ).join( '' )
            if (attached_medias.length) {
                await fetch(
                    `https://graph.facebook.com/v14.0//${id_page}/feed/?message=${content}${attached_medias}&access_token=${tokenFacebook}`,
                    {method: 'POST'}
                ).then( r => {
                    if (r.status === 200) return setProcess( process => process + 10 )
                } );
            }
        } catch (error) {
            console.log( error )
        }
    }
    const [closeModal, setCloseModal] = useState( false )
    useEffect( () => {
        if (closeModal) {
            setTimeout( () => {
                close()
                document.body.style.overflow = 'auto'
            }, 300 )
        }
    }, [closeModal] )
    const [data, setData] = useState( {content: '', images: product.imageSmalls} )
    return (
        <div className={styles.modal}>
            <div className={cx( styles.form_up_face, closeModal && styles.out )}>
                <button onClick={() => setCloseModal( true )}>close</button>
                <div>
                    <span>Nội dung facebook</span>
                    <textarea
                        value={data.content}
                        onChange={(e) => setData( {...data, content: e.target.value} )}
                    />
                </div>
                <div style={{display: "flex"}}>
                    {product?.imageSmalls?.map( (e, i) => {
                        return (
                            <div key={i}>
                                <img src={e} alt="" height={100} width={100}/>
                                <div>
                                    <button>close</button>
                                </div>
                            </div>
                        )
                    } )}
                </div>
                {process &&
                <div className={styles.wrapper_process}>
                    <div className={styles.process}>
                        <div className={styles.processing} style={{width: `${process}%`}}>

                        </div>
                    </div>
                </div>
                }
                <div>
                    <button onClick={() => pushFacebook( data )}>Đăng</button>
                </div>
            </div>
        </div>
    )
}

