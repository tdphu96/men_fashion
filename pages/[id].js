import {useEffect, useRef, useState} from "react";
import cx from 'classnames'
import styles from '../styles/DetailProduct.module.scss'
import NATS from "../clientNats/clientNats";
import {useRouter} from "next/router";
import Head from "next/head";
import Header from "../partial/header";
import axios from "axios";
import useDeviceDetect from "../hookCustom/isMobile";

const initProduct = {
    category: "",
    active: "",
    fanPage: "",
    link: "",
    nameProduct: "",
    quantitySold: "",
    price: "",
    priceDrops: "",
    percentDrops: "",
    describe: "",
    imageSmalls: []
}
export default function DetailProduct () {
    const router = useRouter()
    const {id} = router.query
    const [product, setProduct] = useState(initProduct)
    const [indexImage, setIndexImage] = useState(0)
    const [fullImage, setFullImage] = useState()
    const [vouchers, setVouchers] = useState([])
    // useEffect(() => {
    //     if ('geolocation' in navigator) {
    //         navigator.geolocation.watchPosition(function(position) {
    //             alert({ lat: position.coords.latitude, lng: position.coords.longitude });
    //         });
    //     }
    // }, [])
    useEffect( () => {
        if(!id) return
        (async () => {
            try {
                let {data} = await NATS.getDetail( 'products', id )
                let temp = {...data}
                let views = temp.views ? (temp.views + 1) : 1
                temp = {...data, views: views}
                await NATS.updateProduct( temp )
                setProduct( data )
            } catch (e) {
                console.log( e )
            }
            return () => {
                NATS.drain().then( () => console.log( "drained" ) )
            }
        })()
    }, [id] )

    useEffect(() => {
        axios.get('https://api.accesstrade.vn/v1/offers_informations/coupon_hot', //merchant=shopee&limit=100
            {
                headers: {
                    'Authorization': `Token UI_ITf_qlZV18fMTk8zLHMVLCvMRFB03`,
                    "Content-Type": "application/json",
                },
            }).then(r => {
                console.log(r.data.data)
            setVouchers(r.data.data)
        })
    }, [])
    const {category, active, fanPage, link, nameProduct, quantitySold, price, priceDrops, percentDrops, describe, imageSmalls} = product
    const ecommerce = [
        {name: 'Shoppe', image: 'https://1ty.vn/datafiles/3/2019-05-16/64184445-shopee-logo.png' },
        {name: 'Tiki', image: 'https://salt.tikicdn.com/cache/w500/ts/seller/ee/fa/a0/98f3f134f85cff2c6972c31777629aa0.png' },
        {name: 'Lazada', image: 'https://cdn.chanhtuoi.com/uploads/2020/06/logo-lazada-2.png' },
        {name: 'Chợ tốt', image: 'https://yt3.ggpht.com/ytc/AKedOLTJYhlZ4X7K1KkdBqVZoZ0dniue18GR4-G164fS7NM=s900-c-k-c0x00ffffff-no-rj' },
        {name: 'Con cưng', image: 'https://cdn.nhanlucnganhluat.vn/uploads/images/2DA0CC49/logo/2021-07/Logo%20Con%20C%C6%B0ng.png' },
    ]
    const ref = useRef(null);
    const {isMobile} = useDeviceDetect()
    const scroll = (scrollOffset) => {
        return ref.current.scrollTo({top: 0, left: scrollOffset, behavior: 'smooth' });
    };
    if(isMobile) return (
        <div className={styles.detail_product_mobile}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <div className={styles.top_bars}>
                <div onClick={() => router.back()} className={styles.action_back}>
                    <i className={'fad fa-angle-left'}/>
                </div>
                <div className={styles.group_action}>
                    <i className={'fad fa-ellipsis-h'}/>
                </div>
            </div>
            <div
                ref={ref}
                onScroll={(e) => {
                    console.log(e.target.scrollWidth)
                    if((e.target.clientWidth - e.target.scrollLeft) < e.target.clientWidth/2 - 10) {
                        // scroll(e.target.clientWidth)
                    }
                    // console.log(e.target.scrollLeft)
                    // console.log(e.target.clientWidth)
                }
                }
                className={styles.list_image_product} style={{gridTemplateColumns: `repeat(${imageSmalls.length}, 100vw)`}}>
                {imageSmalls?.map((e, i) => {
                    return (
                        <div onMouseMove={() => setIndexImage(i)}
                             onClick={() => setFullImage({imageSmalls, imageActive: e})}
                             className={styles.image_product} key={i}>
                            <img src={e.slice(0, -3)} alt=""/>
                        </div>
                    )
                })}
            </div>
            <div className={styles.info_product}>
                <span className={styles.name_product}>{nameProduct}</span>
                <div style={{display: 'flex', gap: 10}}>
                    <span className={styles.price_drops}>{priceDrops}</span>
                    <span className={styles.price}>{price.length > 16 ? '' : price}</span>
                    <span className={styles.percent_drops}>{percentDrops}</span>
                </div>
            </div>
            <div className={styles.describe}>
                <h2>Mô tả sản phẩm</h2>
                <div style={{whiteSpace: 'pre-wrap'}}>
                    {describe}
                </div>
            </div>
            <div className={styles.footer_buy}>
                <div className={styles.btt_buy}>MUA HÀNG</div>
            </div>
        </div>
    )
    return (
        <div className={styles.detail_product}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <Header/>
            <div className={styles.container}>
                <div className={styles.top_content}>
                    <div>
                        <div onClick={() => {
                            setFullImage({imageSmalls, imageActive: imageSmalls[indexImage]})
                        }}>
                            <img className={styles.image_large} src={imageSmalls.length > 0 ? imageSmalls[indexImage].slice(0, -3) : 'https://www.chanchao.com.tw/vibs/images/default.jpg'} alt=""/>
                        </div>
                        <div style={{display: 'flex'}}>
                            {imageSmalls?.map((e, i) => {
                                return (
                                    <div onMouseMove={() => setIndexImage(i)}
                                         onClick={() => setFullImage({imageSmalls, imageActive: e})}
                                         className={indexImage === i ? styles.active_image_smalls : styles.image_smalls} key={i}>
                                        <img src={e} alt="" width={50} height={50}/>
                                    </div>
                                )
                            })}
                        </div>
                    </div>
                    <div className={styles.info_product}>
                        <div className={styles.name_product}>{nameProduct}</div>
                        <div>
                            {price &&<span className={styles.price}>{price}</span>}
                            <span className={styles.price_drops}>{priceDrops}</span>
                        </div>
                        <div className={styles.percentDrops}>{percentDrops}</div>
                        <button className={styles.buy}>MUA NGAY</button>
                    </div>
                </div>
                <div className={styles.describe}>
                    <h3>Mô tả sản phẩm</h3>
                    <div style={{whiteSpace: 'pre-wrap'}}>
                        {describe}
                    </div>
                </div>
                <div>
                    <h3>Mã giám giá hot</h3>
                    <div className={styles.wrapper_vouchers}>
                        {vouchers.map((e, i) => {
                            const {image, content, name} = e
                            return (
                                <div key={i}>
                                    <img src={image} alt=""/>
                                    <span>{content}</span>
                                    <span>Tên: {name}</span>
                                </div>
                            )
                        })}
                    </div>
                </div>
                <div>
                    <h3>Xem mã giảm giá theo Ecommerce</h3>
                    <div className={styles.wrapper_vouchers}>
                        {ecommerce.map((e, i) => {
                            const {image,name} = e
                            return (
                                <div key={i}>
                                    <img src={image} alt=""/>
                                    <span>Tên: {name}</span>
                                </div>
                            )
                        })}
                    </div>
                </div>
            </div>
            {fullImage && <FullImage close={() => setFullImage(null)} product={fullImage}/> }
        </div>
    )
}

const FullImage = ({product, close}) => {
    const [closeModal, setCloseModal] = useState(false)
    const [activeImg, setActiveImg] = useState(null)
    useEffect(() => {
        if(closeModal) {
            setTimeout(() => {
                close()
            }, 300)
        }
    }, [closeModal])
    if(!product) return
    const {imageSmalls, imageActive} = product
    return (
        <div className={styles.modal}>
            <button onClick={() => setCloseModal(true)}>close</button>
            <div className={cx(styles.full_image, closeModal && styles.out)}>
                <img className={styles.image_review} src={activeImg ? activeImg : imageActive } alt=""/>
                <div className={styles.choose_image}>
                    {imageSmalls.map((e, i) => {
                        return (
                            <div onMouseMove={() => setActiveImg(e)}
                                key={i} className={activeImg === e ? styles.active_image_large : styles.image_large}>
                                <img src={e} alt=""/>
                            </div>
                        )
                    })}
                </div>
            </div>
        </div>
    )
}
